---
type: update
version: 1.6.1
id: glassfish-cluster-addon
name: GlassFish Auto-Cluster
logo: https://github.com/jelastic-jps/glassfish/raw/master/glassfish-cluster/img/glassfish-logo.png
description: 'Auto-clustering: transforming standalone nodes to cluster'

globals:
  port: 28080
  payara: false
  
nodeGroupAlias:
  ${targetNodes.nodeGroup}: cp
   
onInstall:
  - if ('${nodes.cp.master.nodeType}'.indexOf('payara') > -1):
      setGlobals:
        payara: true

  - if (nodes.das && ${settings.clone:false}):
    - cleanCluster
    - localhost:4848->das:4848:
        nodeId: ${nodes.das.master.id}
        dasNodeId: ${nodes.das.master.id}
    - forEach(nodes.cp):
      - exposePortsAndUpdateLink2Das: ${@i.id}
      - if (${globals.payara}):
          addHost2Hazelcast: ${@i.id}
    - restartContainers[cp]
    - restartRequired

  - if (!nodes.das || (nodes.das && !${settings.clone:false})):
      buildCluster:
        redeploy: false        
        
onBeforeServiceScaleOut[cp]:
  - if (nodes.das):
      forEach(event.response.nodes):
        - uploadSSHKeys: ${@i.id}
        - if (${globals.payara}):
            addHost2Hazelcast: ${@i.id}
        - exposePortsAndUpdateLink2Das: ${@i.id}
        - restartContainers[${@i.id}]
  - if (!nodes.das && nodes.cp.length > 1):
      buildCluster:
        redeploy: true
      
onBeforeScaleIn[cp]:
  forEach(event.response.nodes):
  - if (${globals.payara}):
      removeHostFromHazelcast: ${@i.id}
  - cmd[${@i.id}]: $STACK_PATH/service.sh delete
  
onAfterScaleOut[cp]:
  if (nodes.das): restartRequired
onAfterScaleIn[cp]:
  if (nodes.das): restartRequired

onAfterClone:
  - script: delete MANIFEST.id; return {result:0, jps:MANIFEST};
  - install[${targetNodes.nodeGroup}]: ${response.jps}
    envName: ${event.response.env.envName}    
    settings: 
      clone: true    
    
onBeforeSetCloudletCount[cp]:
  if (nodes.das):
    cmd[${nodes.cp.master.id}]: touch $STACK_PATH/.skiprestart
    
onAfterSetCloudletCount[cp]:
  if (nodes.das):
    cmd[das]: $STACK_PATH/service.sh restartAllInstances
    
onAfterSetCloudletCount[das]:
  cmd[das]: $STACK_PATH/service.sh restart
  
onAfterRedeployContainer[cp]:
  if (nodes.das):
    forEach(event.response.responses):
      addRedirect2DasAdmin: ${@i.nodeid}
      
onAfterMigrate:
  if (!nodes.das):
    localhost:4848->das:4848:
      nodeId: ${nodes.cp.master.id}
      dasNodeId: ${nodes.cp.master.id}
  if (nodes.das):
    - localhost:4848->das:4848:
        nodeId: ${nodes.das.master.id}
        dasNodeId: ${nodes.das.master.id}
    - localhost:4848->das:4848:
        nodeId: cp
        dasNodeId: ${nodes.das.master.id}      
    - addRedirect2DasAdmin: cp

onAfterBindSSL:
  - if ( nodes.cp.length = 1):
    - log: after bind SSL
    - cmd[${nodes.das.master.id}]:
      - mkdir -p /var/lib/jelastic/SSL/
      - chown $STACK_USER:$STACK_USER -R /var/lib/jelastic/SSL/
      user: root
    - environment.file.write:
        nodeid: ${nodes.das.master.id}
        path: /var/lib/jelastic/SSL/customssl.conf
        user: root
        body: |
          key=${event.params.cert_key}
          intermediate=${event.params.intermediate}
          cert=${event.params.cert}
    - cmd[${nodes.das.master.id}]:
      - jem ssl install
      user: root

onAfterRemoveSSL:
  - if ( nodes.cp.length = 1):
    - cmd[${nodes.das.master.id}]:
      - jem ssl remove
      user: root
  
actions:
  cleanCluster:
    cmd[${nodes.das.master.id}]: $STACK_PATH/service.sh clean
    
  buildCluster:
    - if (!nodes.das):
      #for < 5.8.1 [---
      - addNodes:
          fixedCloudlets: ${nodes.cp.master.fixedCloudlets}
          flexibleCloudlets: ${nodes.cp.master.flexibleCloudlets}
          displayName: DAS
          nodeType: ${nodes.cp.master.nodeType}
          tag: ${nodes.cp.master.version}
          nodeGroup: das
          metadata:
            layer: das
          dockerEnvVars:
            DAS: 'true'
          startService: false
          nodeGroupData:
            validation:
                maxCount: 1
                scalingMode: STATEFUL
            isClusterSupport: false
            isDeploySupport: false

      - api: env.control.SetNodeGroupDisplayName
        nodeGroup: das
        displayName: DAS
    # ---]
    #for 5.8.1+ [---
    - if (nodes.das): 
      - env.control.AddContainerEnvVars[${nodes.das.master.id}]:
         vars: {"DAS":"true"}
    # ---]
    
    - api: env.control.SetNodeGroupDisplayName
      nodeGroup: cp
      displayName: Workers

    - configureVolumesAndLinks:
        redeploy: ${this.redeploy}
      
  restartRequired:
    cmd[das]: $STACK_PATH/service.sh restartRequired
  
  redeployApps:
    cmd[${nodes.cp.master.id}]: $STACK_PATH/service.sh redeploy
    
  copyConfigsAndApps:
    - cmd[${nodes.cp.master.id}]: |-
        path=$STACK_PATH/glassfish/domains/domain1
        scp -o StrictHostKeyChecking=no $path/config/domain.xml jelastic@das:$path/config/domain.xml
        scp -r $path/applications jelastic@das:$path
      
  exposePorts:
    cmd[${this}]: |-
      echo JELASTIC_EXPOSE=${globals.port} >> /.jelenv
      iptables -t nat -I PREROUTING -p tcp -m tcp --dport 4848 -j REDIRECT --to-ports 24848
    user: root
    
  addHost2Hazelcast:
    cmd[das]: $STACK_PATH/service.sh addHost node${this}
  removeHostFromHazelcast:
    cmd[das]: $STACK_PATH/service.sh removeHost node${this}
    
  localhost:4848->das:4848:
    cmd[${this.nodeId}]: |-
      sed -i -e "s/http.*:\/\/.*:4848/https:\/\/node${this.dasNodeId}-${env.domain}:4848/g" ${STACK_PATH}/glassfish/domains/domain1/docroot/index.html
      file=$(find ${STACK_PATH}/glassfish/nodes/*/*/docroot -type f -name index.html)
      [ -n "$file" ] && { sed -i -e "s/http.*:\/\/.*:4848/https:\/\/node${this.dasNodeId}-${env.domain}:4848/g" $file; } || ':'
      
  exposePortsAndUpdateLink2Das:
  - exposePorts: ${this}
  - localhost:4848->das:4848:
      nodeId: ${this}
      dasNodeId: ${nodes.das.master.id}
  - addRedirect2DasAdmin: ${this}
  
  addRedirect2DasAdmin:
    cmd[${this}]: |-
      d=com/sun/enterprise/v3/admin/adapter
      mkdir -p $d
      echo '<html><head><meta http-equiv="refresh" content="0;url=https://node${nodes.das.master.id}-${env.domain}:4848/"/></head></html>' > $d/statusNotDAS.html
      jar uf $STACK_PATH/glassfish/modules/kernel.jar $d/statusNotDAS.html
      rm -rf com

  generateSSHKeys: 
    cmd[${nodes.das.master.id}]: |-
      echo -e 'y\n'|ssh-keygen -t rsa -b 4096 -q -N '' -f ~/.ssh/id_rsa
      cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys
    
  uploadSSHKeys:
    - cmd[${nodes.das.master.id}]: |-
        cat $PSWD_FILE; echo ///; cat ~/.ssh/authorized_keys; echo ///; cat ~/.ssh/id_rsa.pub; echo ///; cat ~/.ssh/id_rsa
    - script: |
        var files = out.split('///'),
            cmd = "echo -e '" + files[0] + "' > $PSWD_FILE;" +
                  "echo -e '" + files[1] + "' > ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys;" + 
                  "echo -e '" + files[2] + "' > ~/.ssh/id_rsa.pub;" + 
                  "echo -e '" + files[3] + "' > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa",
            action = {}, action['cmd[' + ids + ']'] = cmd;
                
        return {result:0, onAfterReturn:action}
      out: ${response.out}
      ids: ${this}

  configureVolumesAndLinks:  
    - cmd[${nodes.cp.master.id}]: mv $PSWD_FILE ${PSWD_FILE}.old
    - generateSSHKeys
    - uploadSSHKeys: cp
    - forEach(nodes.cp):
      - api: env.control.LinkDockerNodes
        sourceNodeId: ${nodes.das.master.id}
        targetNodeId: ${@i.id}
        alias: das
        groupAlias: das
      - exposePortsAndUpdateLink2Das: ${@i.id}
      - if (${globals.payara}):
          addHost2Hazelcast: ${@i.id}
    - localhost:4848->das:4848:
        nodeId: ${nodes.das.master.id}
        dasNodeId: ${nodes.das.master.id}
    - if (${this.redeploy}): copyConfigsAndApps
    - api: env.control.ExecDockerRunCmd
      nodeId: ${nodes.das.master.id}
    - if (${this.redeploy}): redeployApps  
    - restartContainers[cp]
    - restartRequired
